version: 2

jobs:
  # Test the driver
  test-driver:
    docker:
      - image: python:3.6
    steps:
      # Install generation and test tools
      - run: pip install tox invoke grpcio-tools
      # Checkout code
      - checkout
      # Generate source
      - run:
          command: invoke proto
          working_directory: driver
      # Run tests
      - run:
          command: tox
          working_directory: driver
  # Build driver docker container
  docker-driver:
    machine: true
    steps:
      # Login with credentials stored in the UI
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - checkout
      # Prepare qemu
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
      # build the application image
      - run: docker build -t briggysmalls/flipdot_controller:latest -t briggysmalls/flipdot_controller:$CIRCLE_SHA1 -f ./driver/Dockerfile .
      # deploy the image
      - run: |
          docker push briggysmalls/flipdot_controller:$CIRCLE_SHA1 &&
          docker push briggysmalls/flipdot_controller:latest
  # Build and test the app
  test-app:
    docker:
      - image: circleci/golang:1.9-stretch
    working_directory: /go/src/github.com/briggySmalls/flipdot
    steps:
      - run:
          name: Install protobuf compiler
          command: |
            sudo apt-get update &&
            sudo apt-get install -yq protobuf-compiler
      - checkout
      - run:
          name: Build (gets dependencies)
          command: go build
          working_directory: app
      - run:
          name: Install protoc-gen-go & mockgen
          command: |
            go install github.com/golang/protobuf/protoc-gen-go
            go install github.com/golang/mock/mockgen
      - run:
          name: Run tests
          command: make test
          working_directory: app
  # Dockerise the app
  docker-app:
    machine: true
    steps:
      # Login with credentials stored in the UI
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - checkout
      # build the application image
      - run: docker build -t briggysmalls/flipapp:latest -t briggysmalls/flipapp:$CIRCLE_SHA1 -f ./app/Dockerfile .
      # deploy the image
      - run: |
          docker push briggysmalls/flipapp:$CIRCLE_SHA1 &&
          docker push briggysmalls/flipapp:latest
  # Test web app
  test-web:
    docker:
      - image: node:11-stretch
    steps:
      # Checkout code
      - checkout
      # Install deps
      - run:
          command: yarn install --dev
          working_directory: ./web
      # Generate source
      - run:
          command: yarn generate
          working_directory: ./web
      # Run tests
      - run:
          command: yarn test:unit
          working_directory: ./web
  # Build the web app
  build-web:
    docker:
      - image: node:11-stretch
    steps:
      # Checkout code
      - checkout
      # Install deps
      - run:
          command: yarn install --dev
          working_directory: ./web
      # Generate source
      - run:
          command: yarn generate
          working_directory: ./web
      # Build app
      - run:
          command: yarn build
          working_directory: ./web
      # Save built app to workspace
      - persist_to_workspace:
          root: ./web
          paths: dist
  deploy-web:
    docker:
      - image: node:11-stretch
    steps:
      # Install netlify cli
      - run: npm install netlify-cli -g
      # Fetch built web app
      - attach_workspace:
          at: /tmp/dist
      # Deploy
      - run: netlify deploy --dir /tmp/dist --prod --site $NETLIFY_SITE_ID

workflows:
  version: 2
  app:
    jobs:
      - test-app
      - docker-app:
          filters:
              branches:
                only: master
  driver:
    jobs:
      - test-driver
      - docker-driver:
          filters:
            branches:
              only: master
  web:
    jobs:
      - test-web
      - build-web
      - deploy-web:
          requires:
            - build-web
          filters:
            branches:
              only: master