"""
Tasks for maintaining the project,

Execute 'invoke --list' for guidance on using Invoke
"""
import shutil

from invoke import task, tasks
try:
    from pathlib import Path
    Path().expanduser()
except (ImportError, AttributeError):
    from pathlib2 import Path
import webbrowser


ROOT_DIR = Path(__file__).parent
SETUP_FILE = ROOT_DIR.joinpath("setup.py")
TEST_DIR = ROOT_DIR.joinpath("tests")
SOURCE_DIR = ROOT_DIR.joinpath("flipdot_controller")
COVERAGE_DIR = ROOT_DIR.joinpath("htmlcov")
COVERAGE_REPORT = COVERAGE_DIR.joinpath("index.html")
DOCS_DIR = ROOT_DIR.joinpath("docs")
DOCS_BUILD_DIR = DOCS_DIR.joinpath("_build")
DOCS_INDEX = DOCS_BUILD_DIR.joinpath("index.html")
PYTHON_DIRS = [str(d) for d in [SOURCE_DIR, TEST_DIR]]
PROTO_DIR = ROOT_DIR.joinpath("../protos").absolute()
PROTO_OUT_DIR = ROOT_DIR.joinpath("flipdot_controller/protos")
PROTOBUF_SPEC = PROTO_DIR.joinpath("driver.proto")
DOCKER_IMAGE = "briggysmalls/flipdot_controller"


@task(help={'check': "Checks if source is formatted without applying changes"})
def format(c, check=False):
    """
    Format code
    """
    python_dirs_string = " ".join(PYTHON_DIRS)
    proto_globs_strings = ["*_pb2.py", "*_pb2_grpc.py"]
    # Run yapf
    yapf_options = '--recursive {} {}'.format(
        '--diff' if check else '--in-place',
        " ".join(["--exclude '{}'".format(t) for t in proto_globs_strings]))
    yapf_command = "yapf {} {}".format(yapf_options, python_dirs_string)
    c.run(yapf_command)
    # Run isort
    isort_options = '--recursive {}'.format(
        '--check-only' if check else '')
    c.run("isort {} {} {}".format(
        isort_options,
        python_dirs_string,
        " ".join(["-sg \'{}\'".format(t) for t in proto_globs_strings])))


@task
def lint(c):
    """
    Lint code
    """
    c.run("flake8 {} --exclude {}".format(SOURCE_DIR, PROTO_OUT_DIR))
    c.run("pylint {} --ignore {}".format(SOURCE_DIR, PROTO_OUT_DIR))


@task
def test(c):
    """
    Run tests
    """
    c.run("python {} test".format(SETUP_FILE), pty=True)


@task(help={'publish': "Publish the result via coveralls"})
def coverage(c, publish=False):
    """
    Create coverage report
    """
    c.run("coverage run --source {} -m pytest".format(SOURCE_DIR))
    c.run("coverage report")
    if publish:
        # Publish the results via coveralls
        c.run("coveralls")
    else:
        # Build a local report
        c.run("coverage html")
        webbrowser.open(COVERAGE_REPORT.as_uri())


@task
def docs(c):
    """
    Generate documentation
    """
    c.run("sphinx-build -b html {} {}".format(DOCS_DIR, DOCS_BUILD_DIR))
    webbrowser.open(DOCS_INDEX.as_uri())


@task
def clean_docs(c):
    """
    Clean up files from documentation builds
    """
    c.run("rm -fr {}".format(DOCS_BUILD_DIR))


@task
def clean_build(c):
    """
    Clean up files from package building
    """
    c.run("rm -fr build/")
    c.run("rm -fr dist/")
    c.run("rm -fr .eggs/")
    c.run("find . -name '*.egg-info' -exec rm -fr {} +")
    c.run("find . -name '*.egg' -exec rm -f {} +")


@task
def clean_python(c):
    """
    Clean up python file artifacts
    """
    c.run("find . -name '*.pyc' -exec rm -f {} +")
    c.run("find . -name '*.pyo' -exec rm -f {} +")
    c.run("find . -name '*~' -exec rm -f {} +")
    c.run("find . -name '__pycache__' -exec rm -fr {} +")


@task
def clean_tests(c):
    """
    Clean up files from testing
    """
    c.run("rm -fr .tox/")
    c.run("rm -f .coverage")
    c.run("rm -fr {}".format(COVERAGE_DIR))


@task
def clean_proto(c):
    """
    Clean up autogenerated source files
    """
    c.run("rm -fr {}".format(PROTO_OUT_DIR))


@task(pre=[clean_build, clean_python, clean_tests, clean_docs, clean_proto])
def clean(c):
    """
    Runs all clean sub-tasks
    """
    pass


@task(pre=[clean_proto])
def proto(c):
    PROTO_OUT_DIR.mkdir()
    # Create an init file
    PROTO_OUT_DIR.joinpath("__init__.py").touch()
    # Copy the protobuf
    moved_protobuf_spec = PROTO_OUT_DIR.joinpath(PROTOBUF_SPEC.name)
    shutil.copy(str(PROTOBUF_SPEC), str(moved_protobuf_spec))
    command = (
        "python -m grpc_tools.protoc "
        "--proto_path={} "
        "--python_out={} "
        "--grpc_python_out={} {}".format(
            ROOT_DIR,
            ROOT_DIR,
            ROOT_DIR,
            moved_protobuf_spec))
    # Generate the bindings
    print(command)
    c.run(command)
    # Remove the protobuf now we've generated the source
    moved_protobuf_spec.unlink()


@task(pre=[proto], help={'wheel': "Build a wheel distribution"})
def dist(c, wheel=False):
    """
    Build source and wheel packages
    """
    c.run("python setup.py sdist")
    if wheel:
        c.run("python setup.py bdist_wheel")


@task(pre=[clean, tasks.call(dist, wheel=True)])
def release(c):
    """
    Make a release of the python package to pypi
    """
    c.run("twine upload dist/*")


@task
def docker(c, tag="latest"):
    """
    Build docker image for project
    """
    parent_dockerignore = ROOT_DIR.parent.joinpath(".dockerignore")
    shutil.copy(ROOT_DIR.joinpath(".dockerignore"), parent_dockerignore)
    c.run("docker build -t {}:{} -f Dockerfile ..".format(DOCKER_IMAGE, tag))
    parent_dockerignore.unlink()
